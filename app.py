import streamlit as st
import speech_recognition as sr
import sounddevice as sd
import wavio # Importar wavio para guardar archivos WAV
import subprocess
import os
import sys
import threading
import queue
import time

# --- Configurar la codificaci√≥n de la salida de la consola al inicio ---
# Esto es crucial para asegurar que Streamlit y los subprocesos manejen UTF-8 correctamente.
try:
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stderr.reconfigure(encoding='utf-8')
except AttributeError:
    # reconfigure no est√° disponible en todas las versions de Python o entornos
    pass
except Exception as e:
    st.error(f"WARNING: No se pudo reconfigurar la codificacion de la consola: {e}")

# Rutas de archivos (ajustadas para la estructura del proyecto)
AUDIO_FILE = "input_audio/input.wav"
INPUT_TEXT_DIR = "input_text"
ORDER_FILE = os.path.join(INPUT_TEXT_DIR, "order.txt")
MAIN_SCRIPT = "main.py" # main.py est√° en la ra√≠z del proyecto

# Asegurarse de que el directorio de audio exista
os.makedirs(os.path.dirname(AUDIO_FILE), exist_ok=True)
os.makedirs(INPUT_TEXT_DIR, exist_ok=True)

# Inicializar historial de √≥rdenes en la sesi√≥n de Streamlit
if 'order_history' not in st.session_state:
    st.session_state.order_history = []

st.set_page_config(layout="wide", page_title="PLCaid - Asistente de Automatizaci√≥n")

st.title("üó£Ô∏è PLCaid - Asistente de Automatizaci√≥n por Voz")

# Contenedor para la salida de la consola en Streamlit
console_output_placeholder = st.empty()

# Cola para la comunicaci√≥n entre el hilo de subproceso y el hilo principal de Streamlit
output_queue = queue.Queue()

def record_audio(filename, duration=5, samplerate=44100, channels=1):
    """
    Graba audio desde el micr√≥fono predeterminado y lo guarda en un archivo WAV.
    """
    st.info(f"üéôÔ∏è Grabando audio... habla ahora ({duration} segundos).")
    try:
        # Grabar audio
        recording = sd.rec(int(duration * samplerate), samplerate=samplerate, channels=channels, dtype='int16')
        sd.wait() # Esperar a que la grabaci√≥n termine
        
        # Guardar el archivo WAV usando wavio
        wavio.write(filename, recording, samplerate, sampwidth=2)
        st.success(f"‚úÖ Grabaci√≥n finalizada. Audio guardado en: {filename}")
        return True
    except Exception as e:
        st.error(f"‚ùå Error al grabar audio: {e}. Aseg√∫rate de que un micr√≥fono est√© conectado y configurado.")
        return False

def transcribe_audio(audio_file):
    """
    Transcribe el audio de un archivo a texto usando Google Speech Recognition.
    """
    st.info("üó£Ô∏è Transcribiendo voz...")
    recognizer = sr.Recognizer()
    try:
        with sr.AudioFile(audio_file) as source:
            audio_data = recognizer.record(source)
            text = recognizer.recognize_google(audio_data, language="es-ES")
            st.write(f"üó£Ô∏è Transcripci√≥n de voz: **{text}**")
            return text
    except sr.UnknownValueError:
        st.warning("‚ö†Ô∏è No se pudo entender el audio. Por favor, int√©ntalo de nuevo.")
        return None
    except sr.RequestError as e:
        st.error(f"‚ùå Error en el servicio de reconocimiento de voz; {e}")
        return None
    except Exception as e:
        st.error(f"‚ùå Error al transcribir audio: {e}")
        return None

def run_main_script_in_thread(order_text, q):
    """
    Ejecuta el script main.py como un subproceso en un hilo separado
    y redirige su salida a una cola.
    """
    try:
        # Configurar el entorno para el subproceso, asegurando UTF-8
        env = os.environ.copy()
        env['PYTHONIOENCODING'] = 'utf-8'
        env['PYTHONUTF8'] = '1' # Para Python 3.7+

        # Usar Popen para capturar la salida en tiempo real
        process = subprocess.Popen(
            ["python", MAIN_SCRIPT, order_text],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=False, # Leer como bytes
            env=env,
            encoding=None # No decodificar autom√°ticamente aqu√≠
        )

        # Leer stdout y stderr en hilos separados para evitar deadlocks
        def read_stream(stream, stream_name):
            for line_bytes in stream:
                try:
                    line_decoded = line_bytes.decode('utf-8', errors='replace').strip()
                    if line_decoded:
                        q.put(f"[{stream_name}] {line_decoded}")
                except Exception as decode_e:
                    q.put(f"[{stream_name} DECODE ERROR] {decode_e} - Raw: {line_bytes}")

        stdout_thread = threading.Thread(target=read_stream, args=(process.stdout, "STDOUT"))
        stderr_thread = threading.Thread(target=read_stream, args=(process.stderr, "STDERR"))

        stdout_thread.start()
        stderr_thread.start()

        stdout_thread.join()
        stderr_thread.join()

        process.wait() # Esperar a que el proceso termine
        
        if process.returncode == 0:
            q.put("‚úÖ main.py ejecutado correctamente.")
        else:
            q.put(f"‚ùå main.py finaliz√≥ con errores. C√≥digo de salida: {process.returncode}")

    except FileNotFoundError:
        q.put(f"‚ùå Error: El script '{MAIN_SCRIPT}' no se encontr√≥. Aseg√∫rate de que est√© en la ra√≠z del proyecto.")
    except Exception as e:
        q.put(f"‚ùå Error inesperado al ejecutar main.py: {e}")


# Funci√≥n para actualizar la salida de la consola en Streamlit
def update_console_output():
    output_lines = []
    while not output_queue.empty():
        output_lines.append(output_queue.get())
    
    if output_lines:
        with console_output_placeholder.container():
            st.subheader("Salida en consola:")
            for line in output_lines:
                st.code(line, language="text")
        # st.experimental_rerun() # Descomentar si la actualizaci√≥n no es lo suficientemente r√°pida
                               # Puede causar parpadeo si se llama con demasiada frecuencia

# Bot√≥n para iniciar la grabaci√≥n y el procesamiento
if st.button("üé§ Iniciar Asistente"):
    if record_audio(AUDIO_FILE):
        transcribed_text = transcribe_audio(AUDIO_FILE)
        if transcribed_text:
            # Guardar la transcripci√≥n en el archivo de orden
            with open(ORDER_FILE, "w", encoding="utf-8") as f:
                f.write(transcribed_text)
            st.info(f"INFO: Transcripci√≥n guardada en: {ORDER_FILE}")

            # A√±adir al historial de √≥rdenes
            st.session_state.order_history.append(f"[{time.strftime('%H:%M:%S')}] {transcribed_text}")

            st.info(f"üõ†Ô∏è Ejecutando main.py con la orden: {transcribed_text}")
            
            # Ejecutar main.py en un hilo separado
            thread = threading.Thread(target=run_main_script_in_thread, args=(transcribed_text, output_queue))
            thread.start()
            
            # Mostrar un mensaje de carga mientras el subproceso se ejecuta
            with st.spinner('Procesando orden...'):
                while thread.is_alive() or not output_queue.empty():
                    update_console_output()
                    time.sleep(0.1) # Peque√±a pausa para evitar el uso excesivo de la CPU

            update_console_output() # Una √∫ltima actualizaci√≥n para asegurar que se muestre todo

# Mostrar historial de √≥rdenes
st.subheader("üïì Historial de √≥rdenes")
if st.session_state.order_history:
    for order in reversed(st.session_state.order_history): # Mostrar las m√°s recientes primero
        st.write(order)
else:
    st.info("No hay √≥rdenes en el historial a√∫n.")
